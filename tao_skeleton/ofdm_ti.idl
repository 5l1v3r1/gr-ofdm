module ofdm_ti {
    typedef sequence<float> float_sequence;
    typedef sequence<octet> byte_sequence;
    typedef long station_id;
    typedef sequence<station_id> sid_sequence;
    typedef struct cmplx {
        float i;
        float q;
    } scatter_complex ;
    typedef sequence<scatter_complex> scatter_sequence;

  interface push_vector_f {
    // push one or more vectors to servant
    // assert vector length is multiple of vlen()
    oneway void push(in float_sequence vector);

    // vector length accepted by interface
    short vlen();
  };

  interface push_vector_c {
    // push one or more vectors to servant
    // assert vector length is multiple of vlen()
    oneway void push(in float_sequence vector);

    // vector length accepted by interface
    short vlen();
  };

  interface data_buffer {
    // retrieve whole stored data
    float_sequence get_data();

    // vector length. outputs are multiples of this value
    short vlen();

    // flush buffer
    void flush();
  };

  interface info_tx {
    readonly attribute short subcarriers;
    readonly attribute short fft_window;
    readonly attribute short cp_length;
    readonly attribute float carrier_freq;
    readonly attribute float symbol_time;
    readonly attribute float bandwidth;
    readonly attribute float subbandwidth;
    readonly attribute long max_datarate;
    readonly attribute short burst_length;
  };

    interface PA_Ctrl {
        enum strategy_type {margin_adaptive, rate_adaptive, reset};
        attribute float required_ber;
        attribute float constraint;
        attribute short modulation;
	attribute float freqoff;
        attribute float channel_refresh_interval;
        readonly attribute float data_rate;
        void change_strategy(in strategy_type mode);
        oneway void update();
    };

  struct tx_config_data {
    unsigned short tx_id;
    float_sequence power_map;
    byte_sequence mod_map;
    sid_sequence assignment_map;
    unsigned short data_blocks;
    unsigned short id_blocks;
  };

    struct rx_performance_measure {
        station_id rx_station; // associated station
        unsigned short rx_id;  // decoded frame id
        float_sequence ctf;    // estimated channel transfer function
        float ber;             // estimated BER
        float snr;             // estimated average SNR
	float freqoff;	       // estimated frequency offset
        float_sequence est_sinr_sc;    // sinr per subcarrier
        scatter_sequence scatter; // rx scatterplot complex samples
    };

  struct baseband_rx {
    station_id rx_station; // associated station
    unsigned short rx_id;  // decoded frame id
    float_sequence bband;    // baseband at the receiver
    float_sequence timing_metric;    // timing metric
  };
};
